---
- name: Add harbor scc
  kubernetes.core.k8s:
    state: present
    src: harbor-scc.yaml

- name: Add gitlab scc
  kubernetes.core.k8s:
    state: present
    src: gitlab-scc.yaml

- name: Deploy Big Bang
  kubernetes.core.helm:
    name: bigbang
    release_namespace: bigbang
    create_namespace: true
    chart_ref: "{{ ansible_env.HOME }}/bigbang/chart"
    values_files:
      - "{{ ansible_env.HOME }}/ingress-certs.yaml"
      - "{{ ansible_env.HOME }}/ib_creds.yaml"
      - "{{ ansible_env.HOME }}/demo_values.yaml"
  register: bigbang

- name: Add harbor NetworkAttachmentDefinition
  kubernetes.core.k8s:
    state: present
    src: network-attachment-definition.yaml
    namespace: harbor

- name: Add gitlab NetworkAttachmentDefinition
  kubernetes.core.k8s:
    state: present
    src: network-attachment-definition.yaml
    namespace: gitlab

- name: Add harbor network policy
  kubernetes.core.k8s:
    state: present
    src: harbor-network-policy.yaml

- name: Add gitlab network policy
  kubernetes.core.k8s:
    state: present
    src: gitlab-network-policy.yaml

- name: Wait 5 minutes for big bang to initialize
  ansible.builtin.wait_for:
    timeout: 300
  delegate_to: localhost
  when: bigbang.changed

- name: Check if prometheus is available and returning status 200
  uri:
    url: "https://prometheus.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if alertmanager is available and returning status 200
  uri:
    url: "https://alertmanager.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if argocd is available and returning status 200
  uri:
    url: "https://argocd.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if gitlab is available and returning status 200
  uri:
    url: "https://gitlab.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if registry is available and returning status 200
  uri:
    url: "https://registry.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if grafana is available and returning status 200
  uri:
    url: "https://grafana.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if kibana is available and returning status 200
  uri:
    url: "https://kibana.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if sonarqube is available and returning status 200
  uri:
    url: "https://sonarqube.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if harbor is available and returning status 200
  uri:
    url: "https://harbor.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if jaeger is available and returning status 200
  uri:
    url: "https://tracing.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20

- name: Check if kiali is available and returning status 200
  uri:
    url: "https://kiali.{{ domain }}"
  register: result
  until: "result.status == 200"
  retries: 40
  delay: 20